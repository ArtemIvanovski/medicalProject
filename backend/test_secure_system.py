#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
"""

import os
import sys
import time
import subprocess
import json
from pathlib import Path


def print_banner(text):
    print("\n" + "=" * 60)
    print(f"  {text}")
    print("=" * 60)


def print_step(step_num, description):
    print(f"\n[–®–∞–≥ {step_num}] {description}")
    print("-" * 50)


def run_generator_command(command, timeout=30):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        cmd = [sys.executable, 'secure_glucose_generator.py', command]
        result = subprocess.run(cmd, capture_output=True, text=True, timeout=timeout)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.TimeoutExpired:
        return False, "", "Timeout"
    except Exception as e:
        return False, "", str(e)


def show_status():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    success, stdout, stderr = run_generator_command('status')
    if success:
        try:
            status = json.loads(stdout)
            print(f"üìä –°—Ç–∞—Ç—É—Å —Å–µ–Ω—Å–æ—Ä–∞ {status['serial_number']}:")
            print(f"   ‚Ä¢ –¢–µ–∫—É—â–∏–π nonce: {status['current_nonce']}")
            print(f"   ‚Ä¢ –û–∫–Ω–æ nonce: {status['nonce_window']['start']} - {status['nonce_window']['end']}")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π: {status['total_measurements']}")
            print(f"   ‚Ä¢ –ù–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö: {status['unsent_measurements']}")
            print(f"   ‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {'‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' if status['connection_available'] else '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}")
            if status['last_successful_send']:
                print(f"   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—Ç–ø—Ä–∞–≤–∫–∞: {time.ctime(status['last_successful_send'])}")
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–∞")
            print(stdout)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {stderr}")


def test_sync():
    """–¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    print("üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
    success, stdout, stderr = run_generator_command('sync')
    if success:
        print("‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {stderr}")


def test_send_data():
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö"""
    print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    success, stdout, stderr = run_generator_command('test')
    if success:
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
        print(stdout)
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {stderr}")


def test_continuous_mode():
    """–¢–µ—Å—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
    print("‚è±Ô∏è –ó–∞–ø—É—Å–∫ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...")
    print("(–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)")

    try:
        cmd = [sys.executable, 'secure_glucose_generator.py']
        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

        start_time = time.time()
        while time.time() - start_time < 60:
            try:
                line = process.stdout.readline()
                if line:
                    print(f"üìù {line.strip()}")

                if process.poll() is not None:
                    break

                time.sleep(0.1)
            except KeyboardInterrupt:
                print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
                break

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        process.terminate()
        try:
            process.wait(timeout=5)
        except subprocess.TimeoutExpired:
            process.kill()

        print("‚úÖ –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ: {str(e)}")


def cleanup_files():
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    files_to_remove = [
        'sensor_state_GLU-6F60C3CB95B2.pickle',
        'sensor_data_GLU-6F60C3CB95B2.db',
        'secure_glucose_generator.log'
    ]

    for filename in files_to_remove:
        filepath = Path(filename)
        if filepath.exists():
            filepath.unlink()
            print(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Ñ–∞–π–ª: {filename}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print_banner("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–ô –°–ò–°–¢–ï–ú–´ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ì–õ–Æ–ö–û–ó–´")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if not os.path.exists('secure_glucose_config.json'):
        print("‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ secure_glucose_config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return

    try:
        while True:
            print("\nüéØ –ú–ï–ù–Æ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
            print("2. –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
            print("3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            print("4. –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º (60 —Å–µ–∫)")
            print("5. –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
            print("6. –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
            print("0. –í—ã—Ö–æ–¥")

            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (0-6): ").strip()

            if choice == '0':
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                break
            elif choice == '1':
                print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã")
                show_status()
            elif choice == '2':
                print_step(2, "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
                test_sync()
                show_status()
            elif choice == '3':
                print_step(3, "–û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                test_send_data()
                show_status()
            elif choice == '4':
                print_step(4, "–ù–µ–ø—Ä–µ—Ä—ã–≤–Ω—ã–π —Ä–µ–∂–∏–º")
                test_continuous_mode()
                show_status()
            elif choice == '5':
                print_step(5, "–°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞")
                print("üìä –°—Ç–∞—Ç—É—Å –î–û –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
                show_status()

                print("\nüí§ –°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ 5 —Å–µ–∫—É–Ω–¥...")
                time.sleep(5)

                print("\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:")
                show_status()
                print("\n‚úÖ –í–∏–¥–Ω–æ, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∏–∑ —Ñ–∞–π–ª–∞!")
            elif choice == '6':
                print_step(6, "–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è")
                cleanup_files()
                print("‚úÖ –§–∞–π–ª—ã —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—á–∏—â–µ–Ω—ã. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    except KeyboardInterrupt:
        print("\n\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")


if __name__ == '__main__':
    main()
